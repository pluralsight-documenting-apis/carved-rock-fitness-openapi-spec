openapi: "3.1.0"
info:
  title: Carved Rock Fitness Customer API
  summary: Customer API endpoints for Carved Rock Fitness
  description: | 
    ## Overview
    The Customer API for Carved Rock Fitness provides access to read and write customer data. It's designed to be RESTful and leverage standard HTTP methods to interact with Customer resources. The API is documented using OpenAPI 3.1, providing a machine-readable description of the API endpoints and data structures. 
    
    ## Support Information
    |                                     |                                                                                     |
    |-------------------------------------|-------------------------------------------------------------------------------------|
    | **Development Team**                | Customer Team                                                                       |
    | **Product Owner**                   | Michael Hoffman                                                                     |
    | **Support Contacts**                | customer-team@carvedrockfitness.com                                                 |
    | **Technical Contact**               | customer-team@carvedrockfitness.com                                                 |
     
    ## Security
    The API is secured using OAuth 2.0 and requires a valid access token to access the endpoints. To receive an API Key, you must contact the Customer Team directly at customer-team@carvedrockfitness.com. 
    
    For more information on API security, check out the [API Security Best Practices](https://www.cavedrockfitness.com/api/guides/api-security-best-practices) guide.
    
    ## Versioning 
    The API is versioned to allow for future updates and changes to the API without breaking existing clients.  
    
    | **Version** | **Description**                                                                 |
    |-------------|---------------------------------------------------------------------------------|
    | v1          | Initial version of the API                                                      |
    | v2          | API updated to use new Cassandra back-end database                              |
  
    ## Error Handling
    The API uses a standard set of error responses to indicate when a request has failed. 
    
    | **Status Code** | **Description**                                                                 |
    |-----------------|---------------------------------------------------------------------------------|
    | 400             | Bad request                                                                     |
    | 401             | Unauthorized request                                                            |
    | 403             | Forbidden request                                                               |
    | 404             | Not found                                                                       |
    | 409             | Conflict                                                                        |
    | 500             | Internal server error                                                           |
  version: v2
  termsOfService: https://www.pluralsight.com/terms
  contact:
    name: Carved Rock Fitness
    email: mike@michaelhoffmaninc.com
    url: https://www.pluralsight.com
  license:
    name: GNU GPLv3
    url: https://www.gnu.org/licenses/gpl-3.0.html
servers:
  - url: https://dev.api.carvedrockfitness.com/customer/api/v2
    description: The development server
  - url: https://test.api.carvedrockfitness.com/customer/api/v2
    description: The test server
  - url: https://api.carvedrockfitness.com/customer/api/v2
    description: The production server
tags:
  - name: Customers
    description: Operations related to customers
  - name: Customer Notes
    description: Operations related to customer notes
security:
  - bearerAuth: []
externalDocs:
  description: Find out more about Carved Rock Fitness
  url: https://www.cavedrockfitness.com/api
paths:
  /customers:
    get:
      tags:
        - Customers
      summary: Get a list of customers
      description: Get a list of customers with optional query parameters to filter the result list
      operationId: getCustomers
      parameters:
        - $ref: '#/components/parameters/CustomerFirstNameQueryParameter'
        - $ref: '#/components/parameters/CustomerLastNameQueryParameter'
        - $ref: '#/components/parameters/CustomerEmailQueryParameter'
      responses:
        '200':
          description: A list of customers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Customer'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
    put:
      tags:
        - Customers
      summary: Update a customer
      description: Update a customer using the customer values passed in the request body
      operationId: updateCustomer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
      responses:
        '200':
          description: Customer updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Customer updated
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '409':
          $ref: '#/components/responses/ConflictResponse'
    post:
      tags:
        - Customers
      summary: Add a new customer
      description: Add a new customer using the customer values passed in the request body
      operationId: addCustomer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerInput'
      responses:
        '201':
          description: Customer added
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Customer added
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
  /customers/{customerId}:
    get:
      tags:
        - Customers
      summary: Get a customer by ID
      description: Get a customer by ID
      operationId: getCustomerById
      parameters:
        - $ref: '#/components/parameters/CustomerIdPathParameter'
      responses:
        '200':
          description: A customer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
    delete:
      tags:
        - Customers
      summary: Delete a customer
      description: Delete a customer by ID
      operationId: deleteCustomer
      parameters:
        - $ref: '#/components/parameters/CustomerIdPathParameter'
      responses:
        '200':
          description: Customer deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Customer deleted
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
  /customers/{customerId}/customer-notes:
    get:
      tags:
        - Customer Notes
      summary: Get notes for a customer
      description: Get notes for a customer by ID
      operationId: getCustomerNotes
      parameters:
        - $ref: '#/components/parameters/CustomerIdPathParameter'
      responses:
        '200':
          description: A list of notes for the customer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerNotes'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
components:
  schemas:
    CustomerInput:
      type: object
      properties:
        firstName:
          type: string
          example: "Michael"
        lastName:
          type: string
          example: "Hoffman"
        email:
          type: string
          example: "mike@michaelhoffmaninc.com"
        phone:
          type: string
          example: "555-555-5555"
        address:
          type: string
          example: "123 Main St"
        city:
          type: string
          example: "Anytown"
        state:
          type: string
          example: "WA"
        country:
          type: string
          example: "USA"
        zipCode:
          type: string
          example: "12345"
        dateOfBirth:
          type: string
          format: date
          example: "1970-01-01"
        gender:
          type: string
          example: "M"
        createdAt:
          type: string
          format: date-time
          example: "2021-01-01T12:00:00Z"
        updatedAt:
          type: string
          format: date-time
          example: "2021-01-01T12:00:00Z"
        isActive:
          type: boolean
          example: true
      required:
        - firstName
        - lastName
        - email
    Customer:
      allOf:
        - $ref: '#/components/schemas/CustomerInput'
        - type: object
          properties:
            id:
              type: integer
              format: int64
              example: 12345
          required:
            - id
    CustomerNotes:
      type: object
      properties:
        customerId:
          type: integer
          format: int64
          example: 12345
        notes:
          type: array
          items:
            type: object
            properties:
              noteId:
                type: integer
                format: int64
                example: 12345
              note:
                type: string
                example: "Customer is a regular at the gym"
              createdAt:
                type: string
                format: date-time
                example: "2021-01-01T12:00:00Z"
              updatedAt:
                type: string
                format: date-time
                example: "2021-01-01T12:00:00Z"
            example:
              customerId: 12345
              notes:
                - noteId: 12345
                  note: "Customer is a regular at the gym"
                  createdAt: "2021-01-01T12:00:00Z"
                  updatedAt: "2021-01-01T12:00:00Z"
  responses:
    BadRequestResponse:
      description: The request could not be understood by the server due to malformed syntax
      content:
        application/json:
          example:
            message: Bad request
            status: 400
            error: Bad request
    ConflictResponse:
      description: The request could not be completed due to a conflict with the current state of the resource
      content:
        application/json:
          example:
            message: Conflict
            status: 409
            error: Conflict
    ForbiddenResponse:
      description: User does not have permission to access the resource or data
      content:
        application/json:
          example:
            message: Forbidden request
            status: 403
            error: Forbidden
    InternalServerErrorResponse:
      description: The server has encountered a situation it doesn't know how to handle
      content:
        application/json:
          example:
            message: Internal server error
            status: 500
            error: Internal server error
    NotFoundResponse:
      description: The requested resource could not be found
      content:
        application/json:
          example:
            message: Not found
            status: 404
            error: Not found
    UnauthorizedResponse:
      description: The request has not been applied because it lacks valid authentication credentials for the target resource
      content:
        application/json:
          example:
            message: Unauthorized request
            status: 401
            error: Unauthorized
  parameters:
    CustomerFirstNameQueryParameter:
      name: firstName
      in: query
      description: The first name of the customer
      schema:
        type: string
        example: "Michael"
    CustomerLastNameQueryParameter:
      name: lastName
      in: query
      description: The last name of the customer
      schema:
        type: string
        example: "Hoffman"
    CustomerEmailQueryParameter:
      name: email
      in: query
      description: The email address of the customer
      schema:
        type: string
        example: "mike@michaelhoffmaninc.com"
    CustomerIdPathParameter:
      name: customerId
      in: path
      description: The ID of the customer
      required: true
      schema:
        type: integer
        format: int64
        example: 12345