openapi: "3.1.0"
info:
  title: Carved Rock Fitness API
  summary: API endpoints for Carved Rock Fitness
  description: API endpoints for Carved Rock Fitness, a retailer that sells fitness merchandise.
  version: 1.0.0
  termsOfService: https://www.pluralsight.com/terms
  contact:
    name: Carved Rock Fitness
    email: mike@michaelhoffmaninc.com
    url: https://www.pluralsight.com
  license:
    name: GNU GPLv3
    url: https://www.gnu.org/licenses/gpl-3.0.html
servers:
  - url: http://localhost:8080/api
    description: The local server
  - url: https://dev.carvedrockfitness.com/api
    description: The development server
  - url: https://test.carvedrockfitness.com/api
    description: The test server
  - url: https://carvedrockfitness.com/api
    description: The production server
tags:
  - name: Customers
    description: Operations related to customers
  - name: Products
    description: Operations related to products
  - name: Workouts
    description: Operations related to workouts
security:
  - bearerAuth: []
paths:
  /customers:
    get:
      tags:
        - Customers
      summary: Get a list of customers
      description: Get a list of customers with optional query parameters to filter the result list
      operationId: getCustomers
      parameters:
        - $ref: '#/components/parameters/CustomerFirstNameQueryParameter'
        - $ref: '#/components/parameters/CustomerLastNameQueryParameter'
        - $ref: '#/components/parameters/CustomerEmailQueryParameter'
      responses:
        '200':
          description: A list of customers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Customer'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
    put:
      tags:
        - Customers
      summary: Update a customer
      description: Update a customer using the customer values passed in the request body
      operationId: updateCustomer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
      responses:
        '200':
          description: Customer updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Customer updated
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '409':
          $ref: '#/components/responses/ConflictResponse'
    post:
      tags:
        - Customers
      summary: Add a new customer
      description: Add a new customer using the customer values passed in the request body
      operationId: addCustomer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerInput'
      responses:
        '201':
          description: Customer added
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Customer added
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
  /customers/{customerId}:
    get:
      tags:
        - Customers
      summary: Get a customer by ID
      description: Get a customer by ID
      operationId: getCustomerById
      parameters:
        - $ref: '#/components/parameters/CustomerIdPathParameter'
      responses:
        '200':
          description: A customer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
    delete:
      tags:
        - Customers
      summary: Delete a customer
      description: Delete a customer by ID
      operationId: deleteCustomer
      parameters:
        - $ref: '#/components/parameters/CustomerIdPathParameter'
      responses:
        '200':
          description: Customer deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Customer deleted
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
  /products:
    get:
      tags:
        - Products
      summary: Get a list of products
      description: Get a list of products with optional query parameters to filter the result list
      operationId: getProducts
      parameters:
        - name: productName
          in: query
          description: The name of the product
          required: false
          schema:
            $ref: '#/components/parameters/ProductNameQueryParameter'
        - name: productCategory
          in: query
          description: The category of the product
          required: false
          schema:
            $ref: '#/components/parameters/ProductCategoryQueryParameter'
        - name: productBrand
          in: query
          description: The brand of the product
          required: false
          schema:
            $ref: '#/components/parameters/ProductBrandQueryParameter'
        - name: productColor
          in: query
          description: The color of the product
          required: false
          schema:
            $ref: '#/components/parameters/ProductColorQueryParameter'
        - name: productSize
          in: query
          description: The size of the product
          required: false
          schema:
            $ref: '#/components/parameters/ProductSizeQueryParameter'
        - name: productWeight
          in: query
          description: The weight of the product
          required: false
          schema:
            $ref: '#/components/parameters/ProductWeightQueryParameter'
        - name: productDimensions
          in: query
          description: The dimensions of the product
          required: false
          schema:
            $ref: '#/components/parameters/ProductDimensionsQueryParameter'
        - name: productSku
          in: query
          description: The SKU of the product
          required: false
          schema:
            $ref: '#/components/parameters/ProductSkuQueryParameter'
        - name: productUpc
          in: query
          description: The UPC of the product
          required: false
          schema:
            $ref: '#/components/parameters/ProductUpcQueryParameter'
      responses:
        '200':
          description: A list of products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
    put:
      tags:
        - Products
      summary: Update a product
      description: Update a product using the product values passed in the request body
      operationId: updateProduct
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '200':
          description: Product updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Product updated
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '409':
          $ref: '#/components/responses/ConflictResponse'
    post:
      tags:
        - Products
      summary: Add a new product
      description: Add a new product using the product values passed in the request body
      operationId: addProduct
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductInput'
      responses:
        '201':
          description: Product added
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Product added
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
  /products/{productId}:
    get:
      tags:
        - Products
      summary: Get a product by ID
      description: Get a product by ID
      operationId: getProductById
      parameters:
        - $ref: '#/components/parameters/ProductIdPathParameter'
      responses:
        '200':
          description: A product
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
    delete:
      tags:
        - Products
      summary: Delete a product
      description: Delete a product by ID
      operationId: deleteProduct
      parameters:
        - $ref: '#/components/parameters/ProductIdPathParameter'
      responses:
        '200':
          description: Product deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Product deleted
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
  /workouts:
    get:
      tags:
        - Workouts
      summary: Get a list of workouts
      description: Get a list of workouts with optional query parameters to filter the result list
      operationId: getWorkouts
      parameters:
        - name: workoutName
          in: query
          description: The name of the workout
          required: false
          schema:
            $ref: '#/components/parameters/WorkoutNameQueryParameter'
        - name: workoutType
          in: query
          description: The type of the workout
          required: false
          schema:
            $ref: '#/components/parameters/WorkoutTypeQueryParameter'
        - name: workoutDuration
          in: query
          description: The duration of the workout
          required: false
          schema:
            $ref: '#/components/parameters/WorkoutDurationQueryParameter'
        - name: workoutIntensity
          in: query
          description: The intensity of the workout
          required: false
          schema:
            $ref: '#/components/parameters/WorkoutIntensityQueryParameter'
        - name: workoutEquipmentNeeded
          in: query
          description: The equipment needed for the workout
          required: false
          schema:
            $ref: '#/components/parameters/WorkoutEquipmentNeededQueryParameter'
        - name: workoutTargetMuscleGroup
          in: query
          description: The target muscle group of the workout
          required: false
          schema:
            $ref: '#/components/parameters/WorkoutTargetMuscleGroupQueryParameter'
        - name: workoutCaloriesBurned
          in: query
          description: The calories burned during the workout
          required: false
          schema:
            $ref: '#/components/parameters/WorkoutCaloriesBurnedQueryParameter'
      responses:
        '200':
          description: A list of workouts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Workout'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
    put:
      tags:
        - Workouts
      summary: Update a workout
      description: Update a workout using the workout values passed in the request body
      operationId: updateWorkout
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Workout'
      responses:
        '200':
          description: Workout updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Workout updated
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '409':
          $ref: '#/components/responses/ConflictResponse'
    post:
      tags:
        - Workouts
      summary: Add a new workout
      description: Add a new workout using the workout values passed in the request body
      operationId: addWorkout
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorkoutInput'
      responses:
        '201':
          description: Workout added
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Workout added
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
  /workouts/{workoutId}:
    get:
      tags:
        - Workouts
      summary: Get a workout by ID
      description: Get a workout by ID
      operationId: getWorkoutById
      parameters:
        - $ref: '#/components/parameters/WorkoutIdPathParameter'
      responses:
        '200':
          description: A workout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workout'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
    delete:
      tags:
        - Workouts
      summary: Delete a workout
      description: Delete a workout by ID
      operationId: deleteWorkout
      parameters:
        - $ref: '#/components/parameters/WorkoutIdPathParameter'
      responses:
        '200':
          description: Workout deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Workout deleted
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
components:
  schemas:
    CustomerInput:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        phone:
          type: string
        address:
          type: string
        city:
          type: string
        state:
          type: string
        country:
          type: string
        zipCode:
          type: string
        dateOfBirth:
          type: string
          format: date
        gender:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        isActive:
          type: boolean
      required:
        - firstName
        - lastName
        - email
    Customer:
      allOf:
        - $ref: '#/components/schemas/CustomerInput'
        - type: object
          properties:
            id:
              type: integer
              format: int64
          required:
            - id
    ProductInput:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        price:
          type: number
          format: float
        currency:
          type: string
        stock:
          type: integer
          format: int32
        category:
          type: string
        brand:
          type: string
        color:
          type: string
        size:
          type: string
        weight:
          type: number
          format: float
        dimensions:
          type: string
        sku:
          type: string
        upc:
          type: string
        image_url:
          type: string
      required:
        - name
        - category
        - brand
        - sku
    Product:
      allOf:
        - $ref: '#/components/schemas/ProductInput'
        - type: object
          properties:
            id:
              type: integer
              format: int64
          required:
            - id
    WorkoutInput:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        type:
          type: string
        duration:
          type: integer
          format: int32
        intensity:
          type: string
        equipmentNeeded:
          type: string
        targetMuscleGroup:
          type: string
        caloriesBurned:
          type: integer
          format: int32
        videoUrl:
          type: string
        imageUrl:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        isActive:
          type: boolean
      required:
        - name
        - type
        - duration
        - intensity
    Workout:
      allOf:
        - $ref: '#/components/schemas/WorkoutInput'
        - type: object
          properties:
            id:
              type: integer
              format: int64
          required:
            - id
  responses:
    BadRequestResponse:
      description: The request could not be understood by the server due to malformed syntax
      content:
        application/json:
          example:
            message: Bad request
            status: 400
            error: Bad request
    ConflictResponse:
      description: The request could not be completed due to a conflict with the current state of the resource
      content:
        application/json:
          example:
            message: Conflict
            status: 409
            error: Conflict
    ForbiddenResponse:
      description: User does not have permission to access the resource or data
      content:
        application/json:
          example:
            message: Forbidden request
            status: 403
            error: Forbidden
    InternalServerErrorResponse:
      description: The server has encountered a situation it doesn't know how to handle
      content:
        application/json:
          example:
            message: Internal server error
            status: 500
            error: Internal server error
    NotFoundResponse:
      description: The requested resource could not be found
      content:
        application/json:
          example:
            message: Not found
            status: 404
            error: Not found
    UnauthorizedResponse:
      description: The request has not been applied because it lacks valid authentication credentials for the target resource
      content:
        application/json:
          example:
            message: Unauthorized request
            status: 401
            error: Unauthorized
  parameters:
    CustomerFirstNameQueryParameter:
      name: firstName
      in: query
      description: The first name of the customer
      schema:
        type: string
        example: "Michael"
    CustomerLastNameQueryParameter:
      name: lastName
      in: query
      description: The last name of the customer
      schema:
        type: string
        example: "Hoffman"
    CustomerEmailQueryParameter:
      name: email
      in: query
      description: The email address of the customer
      schema:
        type: string
        example: "mike@michaelhoffmaninc.com"
    CustomerIdPathParameter:
      name: id
      in: path
      description: The ID of the customer
      required: true
      schema:
        type: integer
        format: int64
        example: 12345
    ProductNameQueryParameter:
      name: productName
      in: query
      description: The name of the product
      schema:
        type: string
        example: "Treadmill"
    ProductCategoryQueryParameter:
      name: category
      in: query
      description: The category of the product
      schema:
        type: string
        example: "Fitness Equipment"
    ProductBrandQueryParameter:
      name: brand
      in: query
      description: The brand of the product
      schema:
        type: string
        example: "NordicTrack"
    ProductColorQueryParameter:
      name: color
      in: query
      description: The color of the product
      schema:
        type: string
        example: "Black"
    ProductSizeQueryParameter:
      name: size
      in: query
      description: The size of the product
      schema:
        type: string
        example: "Large"
    ProductWeightQueryParameter:
      name: weight
      in: query
      description: The weight of the product
      schema:
        type: number
        format: float
        example: 100.0
    ProductDimensionsQueryParameter:
      name: dimensions
      in: query
      description: The dimensions of the product
      schema:
        type: string
        example: "50x25x10"
    ProductSkuQueryParameter:
      name: sku
      in: query
      description: The SKU of the product
      schema:
        type: string
        example: "12345"
    ProductUpcQueryParameter:
      name: upc
      in: query
      description: The UPC of the product
      schema:
        type: string
        example: "123456789012"
    ProductIdPathParameter:
      name: productId
      in: path
      description: The ID of the product
      required: true
      schema:
        type: integer
        format: int64
        example: 12345
    WorkoutNameQueryParameter:
      name: name
      in: query
      description: The name of the workout
      schema:
          type: string
          example: "Cardio Blast"
    WorkoutTypeQueryParameter:
      name: type
      in: query
      description: The type of the workout
      schema:
          type: string
          example: "Cardio"
    WorkoutDurationQueryParameter:
      name: duration
      in: query
      description: The duration of the workout
      schema:
          type: integer
          format: int32
          example: 60
    WorkoutIntensityQueryParameter:
      name: intensity
      in: query
      description: The intensity of the workout
      schema:
          type: string
          example: "High"
    WorkoutEquipmentNeededQueryParameter:
      name: equipmentNeeded
      in: query
      description: The equipment needed for the workout
      schema:
          type: string
          example: "Treadmill"
    WorkoutTargetMuscleGroupQueryParameter:
      name: targetMuscleGroup
      in: query
      description: The target muscle group of the workout
      schema:
          type: string
          example: "Legs"
    WorkoutCaloriesBurnedQueryParameter:
      name: caloriesBurned
      in: query
      description: The calories burned during the workout
      schema:
          type: integer
          format: int32
          example: 500
    WorkoutIdPathParameter:
        name: workoutId
        in: path
        description: The ID of the workout
        required: true
        schema:
            type: integer
            format: int64
            example: 12345