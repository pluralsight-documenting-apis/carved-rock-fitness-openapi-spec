openapi: "3.1.0"
info:
  title: Carved Rock Fitness API
  summary: API endpoints for Carved Rock Fitness
  description: API endpoints for Carved Rock Fitness, a retailer that sells fitness merchandise.
  version: 1.0.0
  contact:
    name: Carved Rock Fitness
    email: mike@michaelhoffmaninc.com
    url: https://www.pluralsight.com
  license:
    name: GNU GPLv3
    url: https://www.gnu.org/licenses/gpl-3.0.html
servers:
  - url: http://localhost:8080/api
    description: The local server
  - url: https://dev.carvedrockfitness.com/api
    description: The development server
  - url: https://test.carvedrockfitness.com/api
    description: The test server
  - url: https://carvedrockfitness.com/api
    description: The production server
tags:
  - name: Customers
    description: Operations related to customers
  - name: Products
    description: Operations related to products
  - name: Workouts
    description: Operations related to workouts
paths:
  /customers:
    get:
      tags:
        - Customers
      summary: Get a list of customers
      description: Get a list of customers with optional query parameters to filter the result list
      operationId: getCustomers
      parameters:
        - name: customerQuery
          in: query
          description: The query to filter customers
          required: false
          schema:
            $ref: '#/components/schemas/CustomerQueryParameters'
      responses:
        '200':
          description: A list of customers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Customer'
    put:
      tags:
        - Customers
      summary: Update a customer
      description: Update a customer using the customer values passed in the request body
      operationId: updateCustomer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
      responses:
        '200':
          description: Customer updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Customer updated
        '404':
          description: Customer not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Customer not found
    post:
      tags:
        - Customers
      summary: Add a new customer
      description: Add a new customer using the customer values passed in the request body
      operationId: addCustomer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerInput'
      responses:
        '201':
          description: Customer added
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Customer added
    delete:
      tags:
        - Customers
      summary: Delete a customer
      description: Delete a customer by ID
      operationId: deleteCustomer
      parameters:
        - name: customerId
          in: path
          description: The ID of the customer to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Customer deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Customer deleted
        '404':
          description: Customer not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Customer not found
  /customers/{customerId}:
    get:
      tags:
        - Customers
      summary: Get a customer by ID
      description: Get a customer by ID
      operationId: getCustomerById
      parameters:
        - name: customerId
          in: path
          schema:
            $ref: '#/components/schemas/CustomerPathParameters'
      responses:
        '200':
          description: A customer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        '404':
          description: Customer not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Customer not found
  /products:
    get:
      tags:
        - Products
      summary: Get a list of products
      description: Get a list of products with optional query parameters to filter the result list
      operationId: getProducts
      parameters:
        - name: productQuery
          in: query
          description: The query to filter products
          required: false
          schema:
            $ref: '#/components/schemas/ProductQueryParameters'
      responses:
        '200':
          description: A list of products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
    put:
      tags:
        - Products
      summary: Update a product
      description: Update a product using the product values passed in the request body
      operationId: updateProduct
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '200':
          description: Product updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Product updated
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Product not found
    post:
      tags:
        - Products
      summary: Add a new product
      description: Add a new product using the product values passed in the request body
      operationId: addProduct
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductInput'
      responses:
        '201':
          description: Product added
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Product added
    delete:
      tags:
        - Products
      summary: Delete a product
      description: Delete a product by ID
      operationId: deleteProduct
      parameters:
        - name: productId
          in: path
          description: The ID of the product to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Product deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Product deleted
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Product not found
  /products/{productId}:
    get:
      tags:
        - Products
      summary: Get a product by ID
      description: Get a product by ID
      operationId: getProductById
      parameters:
        - name: productId
          in: path
          schema:
            $ref: '#/components/schemas/ProductPathParameters'
      responses:
        '200':
          description: A product
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Product not found
  /workouts:
    get:
      tags:
        - Workouts
      summary: Get a list of workouts
      description: Get a list of workouts with optional query parameters to filter the result list
      operationId: getWorkouts
      parameters:
        - name: workoutQuery
          in: query
          description: The query to filter workouts
          required: false
          schema:
            $ref: '#/components/schemas/WorkoutQueryParameters'
      responses:
        '200':
          description: A list of workouts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Workout'
    put:
      tags:
        - Workouts
      summary: Update a workout
      description: Update a workout using the workout values passed in the request body
      operationId: updateWorkout
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Workout'
      responses:
        '200':
          description: Workout updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Workout updated
        '404':
          description: Workout not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Workout not found
    post:
      tags:
        - Workouts
      summary: Add a new workout
      description: Add a new workout using the workout values passed in the request body
      operationId: addWorkout
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorkoutInput'
      responses:
        '201':
          description: Workout added
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Workout added
    delete:
      tags:
        - Workouts
      summary: Delete a workout
      description: Delete a workout by ID
      operationId: deleteWorkout
      parameters:
        - name: workoutId
          in: path
          description: The ID of the workout to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Workout deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Workout deleted
        '404':
          description: Workout not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Workout not found
  /workouts/{workoutId}:
    get:
      tags:
        - Workouts
      summary: Get a workout by ID
      description: Get a workout by ID
      operationId: getWorkoutById
      parameters:
        - name: workoutId
          in: path
          schema:
            $ref: '#/components/schemas/WorkoutPathParameters'
      responses:
        '200':
          description: A workout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workout'
        '404':
          description: Workout not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Workout not found
components:
  schemas:
    ProductInput:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        price:
          type: number
          format: float
        currency:
          type: string
        stock:
          type: integer
          format: int32
        category:
          type: string
        brand:
          type: string
        color:
          type: string
        size:
          type: string
        weight:
          type: number
          format: float
        dimensions:
          type: string
        sku:
          type: string
        upc:
          type: string
        image_url:
          type: string
      required:
        - name
        - category
        - brand
        - sku
    Product:
      allOf:
        - $ref: '#/components/schemas/ProductInput'
        - type: object
          properties:
            id:
              type: integer
              format: int64
          required:
            - id
    ProductQueryParameters:
      type: object
      properties:
        name:
          description: The name of the product
          type: string
        category:
          description: The category of the product
          type: string
        brand:
          description: The brand of the product
          type: string
        color:
          description: The color of the product
          type: string
        size:
          description: The size of the product
          type: string
        weight:
          description: The weight of the product
          type: number
          format: float
        dimensions:
          description: The dimensions of the product
          type: string
        sku:
          description: The SKU of the product
          type: string
        upc:
          description: The UPC of the product
          type: string
    ProductPathParameters:
      type: object
      properties:
        productId:
          type: integer
          format: int64
      required:
        - productId
    CustomerInput:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        phone:
          type: string
        address:
          type: string
        city:
          type: string
        state:
          type: string
        country:
          type: string
        zipCode:
          type: string
        dateOfBirth:
          type: string
          format: date
        gender:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        isActive:
          type: boolean
      required:
        - firstName
        - lastName
        - email
    Customer:
      allOf:
        - $ref: '#/components/schemas/CustomerInput'
        - type: object
          properties:
            id:
              type: integer
              format: int64
          required:
            - id
    CustomerQueryParameters:
      type: object
      properties:
        firstName:
          description: The first name of the customer
          type: string
        lastName:
          description: The last name of the customer
          type: string
        email:
          description: The email of the customer
          type: string
    CustomerPathParameters:
      type: object
      properties:
        customerId:
          type: integer
          format: int64
      required:
        - customerId
    WorkoutInput:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        type:
          type: string
        duration:
          type: integer
          format: int32
        intensity:
          type: string
        equipmentNeeded:
          type: string
        targetMuscleGroup:
          type: string
        caloriesBurned:
          type: integer
          format: int32
        videoUrl:
          type: string
        imageUrl:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        isActive:
          type: boolean
      required:
        - name
        - type
        - duration
        - intensity
    Workout:
      allOf:
        - $ref: '#/components/schemas/WorkoutInput'
        - type: object
          properties:
            id:
              type: integer
              format: int64
          required:
            - id
    WorkoutQueryParameters:
      type: object
      properties:
        name:
          description: The name of the workout
          type: string
        type:
          description: The type of the workout
          type: string
        intensity:
          description: The intensity of the workout
          type: string
    WorkoutPathParameters:
      type: object
      properties:
        workoutId:
          type: integer
          format: int64
      required:
        - workoutId